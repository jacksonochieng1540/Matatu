# docker-compose.yml

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: matatu_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=matatu_booking
      - POSTGRES_USER=matatu_user
      - POSTGRES_PASSWORD=matatu_password_2024
    ports:
      - "5432:5432"
    networks:
      - matatu_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U matatu_user -d matatu_booking"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: matatu_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - matatu_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matatu_web
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 60
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
      - ALLOWED_HOSTS=localhost,127.0.0.1,web,nginx
      - DB_NAME=matatu_booking
      - DB_USER=matatu_user
      - DB_PASSWORD=matatu_password_2024
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - MPESA_ENVIRONMENT=${MPESA_ENVIRONMENT:-sandbox}
      - MPESA_CONSUMER_KEY=${MPESA_CONSUMER_KEY}
      - MPESA_CONSUMER_SECRET=${MPESA_CONSUMER_SECRET}
      - MPESA_SHORTCODE=${MPESA_SHORTCODE:-174379}
      - MPESA_PASSKEY=${MPESA_PASSKEY}
      - MPESA_INITIATOR_NAME=${MPESA_INITIATOR_NAME:-testapi}
      - MPESA_SECURITY_CREDENTIAL=${MPESA_SECURITY_CREDENTIAL}
      - MPESA_CALLBACK_URL=${MPESA_CALLBACK_URL}
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-True}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - AT_USERNAME=${AT_USERNAME:-sandbox}
      - AT_API_KEY=${AT_API_KEY}
      - AT_SENDER_ID=${AT_SENDER_ID:-MATATU}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - matatu_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matatu_celery_worker
    command: celery -A config worker -l info --concurrency=2
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
      - DB_NAME=matatu_booking
      - DB_USER=matatu_user
      - DB_PASSWORD=matatu_password_2024
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - MPESA_ENVIRONMENT=${MPESA_ENVIRONMENT:-sandbox}
      - MPESA_CONSUMER_KEY=${MPESA_CONSUMER_KEY}
      - MPESA_CONSUMER_SECRET=${MPESA_CONSUMER_SECRET}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - AT_USERNAME=${AT_USERNAME:-sandbox}
      - AT_API_KEY=${AT_API_KEY}
    depends_on:
      - db
      - redis
      - web
    networks:
      - matatu_network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matatu_celery_beat
    command: celery -A config beat -l info
    volumes:
      - .:/app
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
      - DB_NAME=matatu_booking
      - DB_USER=matatu_user
      - DB_PASSWORD=matatu_password_2024
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - web
    networks:
      - matatu_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: matatu_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - matatu_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  matatu_network:
    driver: bridge