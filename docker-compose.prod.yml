version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: matatu_db_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - matatu_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: matatu_redis_prod
    volumes:
      - redis_data_prod:/data
    networks:
      - matatu_network
    restart: always
    command: redis-server --appendonly yes

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matatu_web_prod
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 60 --max-requests 1000 --max-requests-jitter 50
    volumes:
      - static_volume_prod:/app/staticfiles
      - media_volume_prod:/app/media
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - matatu_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matatu_celery_worker_prod
    command: celery -A config worker -l info --concurrency=4
    volumes:
      - media_volume_prod:/app/media
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
      - web
    networks:
      - matatu_network
    restart: always

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matatu_celery_beat_prod
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
      - web
    networks:
      - matatu_network
    restart: always

  nginx:
    image: nginx:alpine
    container_name: matatu_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume_prod:/app/staticfiles:ro
      - media_volume_prod:/app/media:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - web
    networks:
      - matatu_network
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: matatu_certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data_prod:
  redis_data_prod:
  static_volume_prod:
  media_volume_prod:
  certbot_conf:
  certbot_www:

networks:
  matatu_network:
    driver: bridge